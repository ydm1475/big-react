(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-dev-runtime"] = {}));
})(this, (function (exports) { 'use strict';

    const supportSymbol = typeof Symbol === 'function' && Symbol;
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;
    const REACT_FRAGMENT_TYPE = supportSymbol
        ? Symbol.for('react.fragment')
        : 0xeacb;

    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            key,
            type,
            ref,
            props,
            __mark: 'YDM'
        };
        return element;
    };
    const jsx = (type, config, ...children) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (val != undefined) {
                    key = "" + val;
                }
                continue;
            }
            if (prop === 'ref') {
                if (val != undefined) {
                    ref = val;
                }
                continue;
            }
            if (Object.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        const childrenLenth = children.length;
        if (childrenLenth === 1) {
            props.children = children[0];
        }
        else if (childrenLenth > 0) {
            props.children = children;
        }
        return ReactElement(type, key, ref, props);
    };
    const Fragment = REACT_FRAGMENT_TYPE;
    const jsxDEV = (type, config, propsKey) => {
        let key = propsKey;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (val != undefined) {
                    key = "" + val;
                }
                continue;
            }
            if (prop === 'ref') {
                if (val != undefined) {
                    ref = val;
                }
                continue;
            }
            if (Object.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        return ReactElement(type, key, ref, props);
    };
    function isValidElement(object) {
        return typeof object === 'object' && object != null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    exports.Fragment = Fragment;
    exports.isValidElement = isValidElement;
    exports.jsx = jsx;
    exports.jsxDEV = jsxDEV;

}));
