(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

    const supportSymbol = typeof Symbol === 'function' && Symbol;
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;

    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            key,
            type,
            ref,
            props,
            __mark: 'YDM'
        };
        return element;
    };
    const jsx = (type, config, ...children) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (val != undefined) {
                    key = "" + val;
                }
                continue;
            }
            if (prop === 'ref') {
                if (val != undefined) {
                    ref = val;
                }
                continue;
            }
            if (Object.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        const childrenLenth = children.length;
        if (childrenLenth === 1) {
            props.children = children[0];
        }
        else {
            props.children = children;
        }
        console.log('type2', key, ref, props);
        return ReactElement(type, key, ref, props);
    };

    var index = {
        version: '0.0.0',
        createELement: jsx,
    };

    return index;

}));
