(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

    const FunctionComponent = 0;
    const HostRoot = 3;
    const HostComponent = 5;
    const HostText = 6;

    const NoFlags = 0b0000000;
    const Placement = 0b0000001;
    const Update = 0b0000010;
    const ChildDeletion = 0b0000100;
    const MutationMask = Placement | Update | ChildDeletion;

    class FiberNode {
        tag;
        key;
        stateNode;
        type;
        ref;
        return;
        sibling;
        child;
        index;
        pendingProps;
        memoizedProps;
        memoizedState;
        alternate;
        flags;
        // 
        subtreeFlags;
        updateQueue;
        constructor(tag, pendingProps, key) {
            this.tag = tag;
            this.key = key;
            this.stateNode = null;
            this.type = null;
            // 表示节点之间的关系
            this.return = null;
            this.sibling = null;
            this.child = null;
            this.index = 0;
            this.ref = null;
            // 作为工作单元
            // 开始的props
            this.pendingProps = pendingProps;
            // 最终的props
            this.memoizedProps = null;
            this.memoizedState = null;
            this.alternate = null;
            //副作用标记
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.updateQueue = null;
        }
    }
    class FiberRootNode {
        container;
        current;
        finshedWork;
        constructor(container, hostRootFiber) {
            this.container = container;
            this.current = hostRootFiber;
            hostRootFiber.stateNode = this;
            this.finshedWork = null;
        }
    }
    const createWorkInProgress = (current, pendingProps) => {
        let wip = current.alternate;
        if (wip === null) {
            // mount阶段
            wip = new FiberNode(current.tag, pendingProps, current.key);
            wip.stateNode = current.stateNode;
            wip.alternate = current;
            current.alternate = wip;
        }
        else {
            // update
            wip.pendingProps = pendingProps;
            wip.flags = NoFlags;
        }
        wip.type = current.type;
        wip.updateQueue = current.updateQueue;
        wip.child = current.child;
        wip.memoizedProps = current.memoizedProps;
        wip.memoizedState = current.memoizedState;
        return wip;
    };
    function createFiberFromElement(element) {
        const { type, key, props } = element;
        let fiberTag = FunctionComponent;
        if (typeof type == 'string') {
            fiberTag = HostComponent;
        }
        else if (typeof type != 'function' && true) {
            console.warn('未定义的type类型', element);
        }
        const fiber = new FiberNode(fiberTag, props, key);
        fiber.type = type;
        return fiber;
    }

    const createUpdate = (action) => {
        return { action };
    };
    const createUpdateQueue = () => {
        return {
            shared: {
                pending: null
            }
        };
    };
    const enqueueUpdate = (updateQueue, update) => {
        updateQueue.shared.pending = update;
    };
    // 消费
    const processUpdateQueue = (baseState, pendingUpdate) => {
        const result = {
            memoizedState: baseState
        };
        if (pendingUpdate != null) {
            const action = pendingUpdate.action;
            if (action instanceof Function) {
                result.memoizedState = action(baseState);
            }
            else {
                result.memoizedState = action;
            }
        }
        return result;
    };

    const supportSymbol = typeof Symbol === 'function' && Symbol;
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;

    function ChildReconciler(shouldTrackEffects) {
        function reconcileSingleElement(returnFiber, currentFiber, element) {
            // 根据reactElement创建一个filber并返回
            const fiber = createFiberFromElement(element);
            fiber.return = returnFiber;
            return fiber;
        }
        function reconcileSingleTextNode(returnFiber, currentFiber, content) {
            const fiber = new FiberNode(HostText, { content }, null);
            fiber.return = returnFiber;
            return fiber;
        }
        function placeSingleChild(fiber) {
            // 代表是首屏渲染流程
            if (shouldTrackEffects && fiber.alternate == null) {
                fiber.flags |= Placement;
            }
            return fiber;
        }
        return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
            if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
                    default:
                        {
                            console.warn('未实现的reconciler类型', newChild);
                        }
                        break;
                }
            }
            // 多节点情况
            // 文本节点
            if (typeof newChild == "string" || typeof newChild == "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
            }
            return null;
        };
    }
    const reconcileChildFibers = ChildReconciler(true);
    const mountChildReconciler = ChildReconciler(false);

    function renderWithHooks(wip) {
        const Component = wip.type;
        const props = wip.pendingProps;
        const children = Component(props);
        return children;
    }

    const beginWork = (wip) => {
        switch (wip.tag) {
            case HostRoot:
                return updateHostRoot(wip);
            case HostComponent:
                return updateHostComponent(wip);
            case HostText:
                return null;
            case FunctionComponent:
                return updateFunctionComponent(wip);
            default:
                {
                    console.warn('beginWork未定义的类型');
                }
                break;
        }
        return null;
    };
    function updateHostRoot(wip) {
        const baseState = wip.memoizedState;
        const updateQueue = wip.updateQueue;
        const pending = updateQueue.shared.pending;
        updateQueue.shared.pending = null;
        const { memoizedState } = processUpdateQueue(baseState, pending);
        wip.memoizedState = memoizedState;
        const nextChildren = wip.memoizedState;
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function updateHostComponent(wip) {
        const nextProps = wip.pendingProps;
        const nextChildren = nextProps.children;
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function updateFunctionComponent(wip) {
        const nextChildren = renderWithHooks(wip);
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function reconcileChildren(wip, children) {
        const current = wip.alternate;
        if (current === null) {
            // mount流程
            wip.child = mountChildReconciler(wip, null, children);
        }
        else {
            // update流程
            wip.child = reconcileChildFibers(wip, current?.child, children);
        }
    }

    const createInstance = (type, props) => {
        const dom = document.createElement(type);
        const isEvent = (key) => key.startsWith("on");
        for (const key in props) {
            if (key === "children") {
                continue;
            }
            if (isEvent(key)) {
                const eventType = key.toLowerCase().substring(2);
                dom.addEventListener(eventType, props[key]);
            }
            else {
                dom.setAttribute(key === "className" ? "class" : key, props[key]);
            }
        }
        return dom;
    };
    const createTextInstance = (text) => {
        return document.createTextNode(text);
    };
    const appendInitialChild = (parent, child) => {
        parent.appendChild(child);
    };
    const appendChildToContainer = appendInitialChild;

    let nextEffect = null;
    function commitMutationEffects(finshedWork) {
        nextEffect = finshedWork;
        while (nextEffect != null) {
            const child = nextEffect.child;
            if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags && child != null) {
                nextEffect = child;
            }
            else {
                // 向上遍历
                up: while (nextEffect != null) {
                    commitMutationEffectsOnFiber(nextEffect);
                    const sibling = nextEffect.sibling;
                    if (sibling != null) {
                        nextEffect = sibling;
                        break up;
                    }
                    nextEffect = nextEffect.return;
                }
            }
        }
    }
    const commitMutationEffectsOnFiber = (finshedWork) => {
        const flags = finshedWork.flags;
        if ((flags & Placement) != NoFlags) {
            commitPlacement(finshedWork);
            finshedWork.flags &= ~Placement;
        }
    };
    function commitPlacement(finshedWork) {
        {
            console.warn('执行Placement操作', finshedWork);
        }
        const hostParent = getHostParent(finshedWork);
        appendPlacementNodeIntoContainer(finshedWork, hostParent);
    }
    function getHostParent(fiber) {
        let parent = fiber.return;
        while (parent) {
            const parentTag = parent.tag;
            if (parentTag === HostComponent) {
                return parent.stateNode;
            }
            if (parentTag === HostRoot) {
                return parent.stateNode.container;
            }
            parent = parent.return;
        }
        {
            console.warn('未找到对应host');
        }
    }
    function appendPlacementNodeIntoContainer(finshedWork, hostParent) {
        if (finshedWork.tag === HostComponent || finshedWork.tag === HostText) {
            appendChildToContainer(hostParent, finshedWork.stateNode);
            return;
        }
        const child = finshedWork.child;
        if (child != null) {
            appendPlacementNodeIntoContainer(child, hostParent);
            let sibling = child.sibling;
            while (sibling != null) {
                appendPlacementNodeIntoContainer(sibling, hostParent);
                sibling = sibling.sibling;
            }
        }
    }

    const completeWork = (wip) => {
        const newProps = wip.pendingProps;
        const current = wip.alternate;
        switch (wip.tag) {
            case HostComponent:
                if (current != null && wip.stateNode) ;
                else {
                    // 构建DOM
                    const instance = createInstance(wip.type, newProps);
                    // 将DOM插入DOM树中
                    appendAllChildren(instance, wip);
                    wip.stateNode = instance;
                }
                bubbleProperties(wip);
                break;
            case HostText:
                if (current != null && wip.stateNode) ;
                else {
                    // 构建DOM
                    const instance = createTextInstance(newProps.content);
                    // 将DOM插入DOM树中
                    wip.stateNode = instance;
                }
                bubbleProperties(wip);
                break;
            case HostRoot:
                bubbleProperties(wip);
                break;
            default:
                {
                    console.warn('未处理的complateWork');
                }
                break;
        }
    };
    function appendAllChildren(parent, wip) {
        let node = wip.child;
        while (node != null) {
            if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node?.stateNode);
            }
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === wip) {
                return;
            }
            while (node.sibling === null) {
                if (node.return === null || node.return === wip) {
                    return;
                }
                node = node?.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function bubbleProperties(wip) {
        let subtreeFlags = NoFlags;
        let child = wip.child;
        while (child != null) {
            subtreeFlags |= child.subtreeFlags;
            subtreeFlags |= child.flags;
            child.return = wip;
            child = child.sibling;
        }
        wip.subtreeFlags |= subtreeFlags;
    }

    let workInProgress = null;
    function prepareFreshStack(root) {
        workInProgress = createWorkInProgress(root.current, {});
    }
    function scheduleUpdateOnFiber(fiber) {
        // 调度功能,参数中的fiber指的是发生Update的fiber节点，要向上遍历到根节点
        const root = markUpdateFromFiberToRoot(fiber);
        renderRoot(root);
    }
    function markUpdateFromFiberToRoot(fiber) {
        let node = fiber;
        let parent = node.return;
        while (parent != null) {
            node = parent;
            parent = node.return;
        }
        if (node.tag === HostRoot) {
            // node.stateNode代表的是FiberRoot
            return node.stateNode;
        }
        return null;
    }
    function renderRoot(root) {
        prepareFreshStack(root);
        do {
            try {
                workLoop();
                break;
            }
            catch (e) {
                {
                    console.warn('发生错误');
                }
                workInProgress = null;
            }
        } while (true);
        // 生成的整个fiberNode
        const finshedWork = root.current.alternate;
        root.finshedWork = finshedWork;
        // wip fiberNode书中的flags
        commitRoot(root);
    }
    function commitRoot(root) {
        const finshedWork = root.finshedWork;
        if (finshedWork === null) {
            return;
        }
        {
            console.warn('commit开始', finshedWork);
        }
        // 重置
        root.finshedWork = null;
        // root flags root subtreeFlags
        const subtreeHasEffect = (finshedWork.subtreeFlags & MutationMask) != NoFlags;
        const rootHasEffect = (finshedWork.flags & MutationMask) != NoFlags;
        if (subtreeHasEffect || rootHasEffect) {
            // beforeMutation
            // mutation Placement
            commitMutationEffects(finshedWork);
            root.current = finshedWork;
            // layout
        }
        else {
            root.current = finshedWork;
        }
    }
    function workLoop() {
        while (workInProgress != null) {
            performUnitOfWork(workInProgress);
        }
    }
    function performUnitOfWork(fiber) {
        // 这里的next指的是fiber的child
        const next = beginWork(fiber);
        fiber.memoizedProps = fiber.pendingProps;
        if (next === null) {
            completeUnitOfWork(fiber);
        }
        else {
            workInProgress = next;
        }
    }
    function completeUnitOfWork(fiber) {
        let node = fiber;
        do {
            completeWork(node);
            const sibling = node.sibling;
            if (sibling != null) {
                workInProgress = sibling;
                return;
            }
            node = node.return;
            workInProgress = node;
        } while (node != null);
    }

    function createContainer(container) {
        const hostRootFiber = new FiberNode(HostRoot, {}, null);
        const root = new FiberRootNode(container, hostRootFiber);
        hostRootFiber.updateQueue = createUpdateQueue();
        return root;
    }
    function updateContainer(element, root) {
        const hostRootFiber = root.current;
        const update = createUpdate(element);
        enqueueUpdate(hostRootFiber.updateQueue, update);
        scheduleUpdateOnFiber(hostRootFiber);
        return element;
    }

    function createRoot(container) {
        const root = createContainer(container);
        return {
            render(element) {
                updateContainer(element, root);
            }
        };
    }

    var ReactDOM = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createRoot: createRoot
    });

    return ReactDOM;

}));
