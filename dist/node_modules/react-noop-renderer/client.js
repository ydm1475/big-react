(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('scheduler')) :
    typeof define === 'function' && define.amd ? define(['react', 'scheduler'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.client = factory(global.React, global.Scheduler));
})(this, (function (React, Scheduler) { 'use strict';

    function _interopNamespaceDefault(e) {
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n.default = e;
        return Object.freeze(n);
    }

    var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);
    var Scheduler__namespace = /*#__PURE__*/_interopNamespaceDefault(Scheduler);

    const FunctionComponent = 0;
    const HostRoot = 3;
    const HostComponent = 5;
    const HostText = 6;
    const Fragment = 7;

    const NoFlags = 0b0000000;
    const Placement = 0b0000001;
    const Update = 0b0000010;
    const ChildDeletion = 0b0000100;
    // 表示当前fiber存在useEffect需要触发的情况。
    const PassiveEffect = 0b0001000;
    const MutationMask = Placement | Update | ChildDeletion;
    const PassiveMask = PassiveEffect | ChildDeletion;

    const supportSymbol = typeof Symbol === 'function' && Symbol;
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;
    const REACT_FRAGMENT_TYPE = supportSymbol
        ? Symbol.for('react.fragment')
        : 0xeacb;

    const SyncLane = 0b0001;
    const NoLane = 0b0000;
    const NoLanes = 0b0000;
    function mergeLanes(LaneA, LaneB) {
        return LaneA | LaneB;
    }
    function requestUpdateLane() {
        return SyncLane;
    }
    function getHighesPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function markRootFinshed(root, lane) {
        root.pendingLanes &= ~lane;
    }

    class FiberNode {
        tag;
        key;
        stateNode;
        type;
        ref;
        return;
        sibling;
        child;
        index;
        pendingProps;
        memoizedProps;
        memoizedState;
        alternate;
        flags;
        // 
        subtreeFlags;
        updateQueue;
        hook;
        deletions;
        constructor(tag, pendingProps, key) {
            this.tag = tag;
            this.key = key;
            this.stateNode = null;
            this.type = null;
            // 表示节点之间的关系
            this.return = null;
            this.sibling = null;
            this.child = null;
            this.index = 0;
            this.ref = null;
            // 作为工作单元
            // 开始的props
            this.pendingProps = pendingProps;
            // 最终的props
            this.memoizedProps = null;
            this.memoizedState = null;
            this.alternate = null;
            //副作用标记
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.updateQueue = null;
            this.hook = null;
            this.deletions = null;
        }
    }
    class FiberRootNode {
        container;
        current;
        finshedWork;
        pendingLanes;
        finishedLane;
        pendingPassiveEffects;
        constructor(container, hostRootFiber) {
            this.container = container;
            this.current = hostRootFiber;
            hostRootFiber.stateNode = this;
            this.finshedWork = null;
            this.pendingLanes = NoLanes;
            this.finishedLane = NoLane;
            this.pendingPassiveEffects = {
                unmount: [],
                update: []
            };
        }
    }
    const createWorkInProgress = (current, pendingProps) => {
        let wip = current.alternate;
        if (wip === null) {
            // mount阶段
            wip = new FiberNode(current.tag, pendingProps, current.key);
            wip.stateNode = current.stateNode;
            wip.alternate = current;
            current.alternate = wip;
        }
        else {
            // update
            wip.pendingProps = pendingProps;
            wip.flags = NoFlags;
            wip.subtreeFlags = NoFlags;
            wip.deletions = null;
        }
        wip.type = current.type;
        wip.updateQueue = current.updateQueue;
        wip.child = current.child;
        wip.memoizedProps = current.memoizedProps;
        wip.memoizedState = current.memoizedState;
        wip.hook = current.hook;
        return wip;
    };
    function createFiberFromElement(element) {
        const { type, key, props } = element;
        let fiberTag = FunctionComponent;
        if (typeof type == 'string') {
            fiberTag = HostComponent;
        }
        else if (typeof type != 'function' && true) {
            console.warn('未定义的type类型', element);
        }
        const fiber = new FiberNode(fiberTag, props, key);
        fiber.type = type;
        return fiber;
    }
    function createFiberFromFragment(elements, key) {
        const fiber = new FiberNode(Fragment, elements, key);
        fiber.type = REACT_FRAGMENT_TYPE;
        return fiber;
    }

    const createUpdate = (action, lane) => {
        return { action, lane, next: null };
    };
    const createUpdateQueue = () => {
        return {
            shared: {
                pending: null
            },
            dispatch: null
        };
    };
    const enqueueUpdate = (updateQueue, update) => {
        const pending = updateQueue.shared.pending;
        if (pending == null) {
            update.next = update;
        }
        else {
            update.next = pending.next;
            pending.next = update;
        }
        updateQueue.shared.pending = update;
    };
    // 消费
    const processUpdateQueue = (baseState, pendingUpdate, renderLane) => {
        const result = {
            memoizedState: baseState
        };
        if (pendingUpdate != null) {
            // 第一个update
            const first = pendingUpdate.next;
            let pending = pendingUpdate.next;
            do {
                const updateLane = pending?.lane;
                if (updateLane === renderLane) {
                    const action = pending.action;
                    if (action instanceof Function) {
                        baseState = action(baseState);
                    }
                    else {
                        baseState = action;
                    }
                }
                else {
                    {
                        console.warn('不应该进入');
                    }
                }
                pending = pending?.next;
            } while (pending !== first);
            result.memoizedState = baseState;
        }
        return result;
    };

    const elementPropsKey = '__props';
    function updateFiberProps(node, props) {
        node[elementPropsKey] = props;
    }

    const createInstance = (type, props) => {
        const dom = document.createElement(type);
        updateFiberProps(dom, props);
        // const dom = document.createElement(type);
        // const isEvent = (key: string) => key.startsWith("on");
        // for (const key in props) {
        //     if (key === "children") {
        //         continue;
        //     }
        //     if (isEvent(key)) {
        //         const eventType = key.toLowerCase().substring(2);
        //         dom.addEventListener(eventType, props[key]);
        //     } else {
        //         dom.setAttribute(key === "className" ? "class" : key, props[key]);
        //     }
        // }
        return dom;
    };
    const createTextInstance = (text) => {
        return document.createTextNode(text);
    };
    const appendInitialChild = (parent, child) => {
        parent.appendChild(child);
    };
    const appendChildToContainer = appendInitialChild;
    const commitUpdate = (fiber) => {
        switch (fiber.tag) {
            case HostText:
                const text = fiber.memoizedProps.content;
                return commitTextUpdate(fiber.stateNode, text);
            case HostComponent:
                return updateFiberProps(fiber.stateNode, fiber.pendingProps);
            default:
                {
                    console.warn("未实现的Update类型", fiber);
                }
                break;
        }
    };
    function commitTextUpdate(textInstance, content) {
        textInstance.textContent = content;
        return textInstance;
    }
    function removeChild(child, container) {
        container.removeChild(child);
    }
    function insertChildToContainer(child, container, before) {
        container.insertBefore(child, before);
    }
    const scheduleMicroTask = typeof queueMicrotask === "function"
        ? queueMicrotask
        : typeof Promise === "function"
            ? (callback) => Promise.resolve(null).then(callback)
            : setTimeout;

    function ChildReconciler(shouldTrackEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackEffects) {
                return;
            }
            const deletions = returnFiber.deletions;
            if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
            }
            else {
                deletions.push(childToDelete);
            }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackEffects) {
                return;
            }
            let childToDelete = currentFirstChild;
            while (childToDelete != null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
        }
        function reconcileSingleElement(returnFiber, currentFiber, element) {
            // 根据reactElement创建一个filber并返回
            const key = element.key;
            work: while (currentFiber != null) {
                // 更新
                if (currentFiber.key === key) {
                    // key相同
                    if (element.$$typeof === REACT_ELEMENT_TYPE) {
                        if (currentFiber.type === element.type) {
                            let props = element.props;
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                props = element.props.children;
                            }
                            // type 相同
                            const existing = useFiber(currentFiber, props);
                            existing.return = returnFiber;
                            deleteRemainingChildren(returnFiber, currentFiber.sibling);
                            return existing;
                        }
                        // key相同, type不同，删掉所有旧的
                        deleteChild(returnFiber, currentFiber);
                        break work;
                    }
                    else {
                        {
                            console.warn('还未实现的react类型', element);
                            break work;
                        }
                    }
                }
                else {
                    // key不同, 
                    deleteChild(returnFiber, currentFiber);
                    currentFiber = currentFiber.sibling;
                }
            }
            let fiber;
            if (element.type === REACT_FRAGMENT_TYPE) {
                fiber = createFiberFromFragment(element.props.children, key);
            }
            else {
                fiber = createFiberFromElement(element);
            }
            fiber.return = returnFiber;
            return fiber;
        }
        function reconcileSingleTextNode(returnFiber, currentFiber, content) {
            while (currentFiber != null) {
                if (currentFiber.tag === HostText) {
                    const existing = useFiber(currentFiber, { content });
                    existing.return = returnFiber;
                    deleteRemainingChildren(returnFiber, currentFiber.sibling);
                    return existing;
                }
                deleteChild(returnFiber, currentFiber);
                currentFiber = currentFiber.sibling;
            }
            const fiber = new FiberNode(HostText, { content }, null);
            fiber.return = returnFiber;
            return fiber;
        }
        function placeSingleChild(fiber) {
            // 代表是首屏渲染流程
            if (shouldTrackEffects && fiber.alternate == null) {
                fiber.flags |= Placement;
            }
            return fiber;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChild) {
            let lastPlacedIndex = 0;
            let lastNewFiber = null;
            let firstNewFiber = null;
            //  1、将current保存在map中
            const existingChildren = new Map();
            let current = currentFirstChild;
            while (current != null) {
                const keyToUse = current.key != null ? current.key : current.index;
                existingChildren.set(keyToUse, current);
                current = current.sibling;
            }
            // 2、遍历newChild，寻找是否可复用
            for (let i = 0; i < newChild.length; i++) {
                const after = newChild[i];
                const newFiber = updateFromMap(returnFiber, existingChildren, i, after);
                if (newFiber === null) {
                    continue;
                }
                // 3、标记移动还是插入
                newFiber.index = i;
                newFiber.return = returnFiber;
                if (lastNewFiber === null) {
                    lastNewFiber = newFiber;
                    firstNewFiber = newFiber;
                }
                else {
                    lastNewFiber.sibling = newFiber;
                    lastNewFiber = lastNewFiber.sibling;
                }
                if (!shouldTrackEffects) {
                    continue;
                }
                const current = newFiber.alternate;
                if (current != null) {
                    const oldIndex = current.index;
                    if (oldIndex < lastPlacedIndex) {
                        // 移动
                        newFiber.flags |= Placement;
                        continue;
                    }
                    else {
                        lastPlacedIndex = oldIndex;
                    }
                }
                else {
                    // mount阶段
                    newFiber.flags |= Placement;
                }
            }
            // 4、将map剩余的标记为删除
            existingChildren.forEach(fiber => {
                deleteChild(returnFiber, fiber);
            });
            return firstNewFiber;
        }
        function updateFromMap(returnFiber, existingChildren, index, element) {
            const keyToUse = element.key != null ? element.key : index;
            const before = existingChildren.get(keyToUse);
            if (typeof element === 'string' || typeof element === 'number') {
                if (before) {
                    if (before.tag === HostText) {
                        existingChildren.delete(keyToUse);
                        return useFiber(before, { content: element + '' });
                    }
                }
                return new FiberNode(HostText, { content: element + '' }, null);
            }
            if (typeof element === 'object' && element != null) {
                switch (element.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        if (element.type === REACT_FRAGMENT_TYPE) {
                            return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
                        }
                        if (before) {
                            if (before.type === element.type) {
                                existingChildren.delete(keyToUse);
                                return useFiber(before, element.props);
                            }
                        }
                        return createFiberFromElement(element);
                }
                // TODO 数组类型
                if (Array.isArray(element)) {
                    return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
                }
            }
            return null;
        }
        return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
            const isUnkeyedTopLevelFragment = typeof newChild === 'object' &&
                newChild !== null &&
                newChild.type === REACT_FRAGMENT_TYPE &&
                newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
                newChild = newChild?.props.children;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
                }
                if (Array.isArray(newChild)) {
                    return reconcileChildrenArray(returnFiber, currentFiber, newChild);
                }
            }
            // 多节点情况
            // 文本节点
            if (typeof newChild == "string" || typeof newChild == "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
            }
            if (currentFiber != null) {
                deleteRemainingChildren(returnFiber, currentFiber);
            }
            return null;
        };
    }
    function useFiber(fiber, pendingProps) {
        const clone = createWorkInProgress(fiber, pendingProps);
        clone.index = 0;
        clone.sibling = null;
        return clone;
    }
    function updateFragment$1(returnFiber, current, elements, key, existingChildren) {
        let fiber;
        if (!current || current.tag != Fragment) {
            fiber = createFiberFromFragment(elements, key);
        }
        else {
            existingChildren.delete(key);
            fiber = useFiber(current, elements);
        }
        fiber.return = returnFiber;
        return fiber;
    }
    const reconcileChildFibers = ChildReconciler(true);
    const mountChildReconciler = ChildReconciler(false);

    const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    // 指的是useEffect
    const Passive = 0b0010;
    const HookHasEffect = 0b0001;

    let currentlyRenderingFiber = null;
    let workInProgressHook = null;
    let currentHook = null;
    const { currentDispatcher } = internals;
    let renderLane = NoLane;
    function renderWithHooks(wip, lane) {
        currentlyRenderingFiber = wip;
        wip.memoizedState = null;
        wip.updateQueue = null;
        renderLane = lane;
        const current = wip.alternate;
        if (current == null) {
            // mount阶段
            currentDispatcher.current = HookDispatcherOnMount;
        }
        else {
            // update阶段
            currentDispatcher.current = HookDispatcherOnUpdate;
        }
        const Component = wip.type;
        const props = wip.pendingProps;
        const children = Component(props);
        currentlyRenderingFiber = null;
        workInProgressHook = null;
        currentHook = null;
        renderLane = NoLane;
        return children;
    }
    const HookDispatcherOnMount = {
        useState: mountState,
        useEffect: mountEffect
    };
    const HookDispatcherOnUpdate = {
        useState: updateState,
        useEffect: updateEffect
    };
    function updateEffect(create, deps) {
        const hook = updateWorkInProgressHook();
        const nextDeps = deps === undefined ? null : deps;
        let destory = () => { };
        if (currentHook != null) {
            const prevEffect = currentHook.memoizedState;
            destory = prevEffect.destory;
            if (nextDeps != null) {
                // 浅比较依赖
                const prevDeps = prevEffect.deps;
                if (areHookInputEqual(prevDeps, nextDeps)) {
                    hook.memoizedState = pushEffect(Passive, create, destory, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber.flags |= PassiveEffect;
        hook.memoizedState = pushEffect(Passive | HookHasEffect, create, destory, nextDeps);
    }
    function mountEffect(create, deps) {
        const hook = mountWorkInProgressHook();
        const nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber.flags |= PassiveEffect;
        hook.memoizedState = pushEffect(Passive | HookHasEffect, create, undefined, nextDeps);
    }
    function areHookInputEqual(nextDeps, prevDeps) {
        if (prevDeps == null || nextDeps == null) {
            return false;
        }
        for (let i = 0; i < prevDeps.length && nextDeps.length; i++) {
            if (Object.is(prevDeps[i], nextDeps[i])) {
                continue;
            }
            return false;
        }
        return true;
    }
    function pushEffect(hookFlags, create, destory, deps) {
        const effect = {
            tag: hookFlags,
            create,
            destory,
            deps,
            next: null
        };
        const fiber = currentlyRenderingFiber;
        let updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
            updateQueue = createFCUpdateQueue();
            fiber.updateQueue = updateQueue;
            effect.next = effect;
            updateQueue.lastEffect = effect;
        }
        else {
            // 插入effect;
            const lastEffect = updateQueue.lastEffect;
            if (lastEffect == null) {
                effect.next = effect;
                updateQueue.lastEffect = effect;
            }
            else {
                const firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                updateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function createFCUpdateQueue() {
        const updateQueue = createUpdateQueue();
        updateQueue.lastEffect = null;
        return updateQueue;
    }
    function dispatchSetState(fiber, updateQueue, action) {
        const lane = requestUpdateLane();
        const update = createUpdate(action, lane);
        enqueueUpdate(updateQueue, update);
        scheduleUpdateOnFiber(fiber, lane);
    }
    function mountState(initialState) {
        const hook = mountWorkInProgressHook();
        let memoizedState;
        if (initialState instanceof Function) {
            memoizedState = initialState();
        }
        else {
            memoizedState = initialState;
        }
        let dispatch = null;
        const queue = createUpdateQueue();
        hook.updateQueue = queue;
        hook.memoizedState = memoizedState;
        dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
        return [memoizedState, dispatch];
    }
    function mountWorkInProgressHook() {
        const hook = {
            memoizedState: null,
            updateQueue: null,
            next: null
        };
        if (workInProgressHook === null) {
            if (currentlyRenderingFiber === null) {
                throw new Error('请在函数组件内调用hook');
            }
            else {
                workInProgressHook = hook;
                currentlyRenderingFiber.memoizedState = workInProgressHook;
                currentlyRenderingFiber.hook = workInProgressHook;
            }
        }
        else {
            // mount时后续的hook
            workInProgressHook.next = hook;
            workInProgressHook = hook;
        }
        return workInProgressHook;
    }
    function updateState() {
        const hook = updateWorkInProgressHook();
        const queue = hook.updateQueue;
        const pending = queue.shared.pending;
        queue.shared.pending = null;
        if (pending !== null) {
            const { memoizedState } = processUpdateQueue(hook.memoizedState, pending, renderLane);
            hook.memoizedState = memoizedState;
        }
        return [hook.memoizedState, queue.dispatch];
    }
    function updateWorkInProgressHook() {
        let nextCurrentHook;
        if (currentHook === null) {
            // FC update时的第一个hook
            const current = currentlyRenderingFiber?.alternate;
            if (current != null) {
                nextCurrentHook = current.memoizedState;
            }
            else {
                nextCurrentHook = null;
            }
        }
        else {
            // FC update时后续的hook
            nextCurrentHook = currentHook.next;
        }
        if (nextCurrentHook === null) {
            throw new Error(`组件${currentlyRenderingFiber?.type}hook使用有误`);
        }
        currentHook = nextCurrentHook;
        const newHook = {
            memoizedState: currentHook?.memoizedState,
            updateQueue: currentHook.updateQueue,
            next: null,
        };
        if (workInProgressHook === null) {
            if (currentlyRenderingFiber === null) {
                throw new Error('请在函数组件内调用hook');
            }
            else {
                workInProgressHook = newHook;
                currentlyRenderingFiber.memoizedState = workInProgressHook;
                currentlyRenderingFiber.hook = workInProgressHook;
            }
        }
        else {
            // mount时后续的hook
            workInProgressHook.next = newHook;
            workInProgressHook = newHook;
        }
        return workInProgressHook;
    }

    const beginWork = (wip, renderLane) => {
        switch (wip.tag) {
            case HostRoot:
                return updateHostRoot(wip, renderLane);
            case HostComponent:
                return updateHostComponent(wip);
            case HostText:
                return null;
            case FunctionComponent:
                return updateFunctionComponent(wip, renderLane);
            case Fragment:
                return updateFragment(wip);
            default:
                {
                    console.warn('beginWork未定义的类型');
                }
                break;
        }
        return null;
    };
    function updateFragment(wip) {
        const nextChildren = wip.pendingProps;
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function updateHostRoot(wip, renderLane) {
        const baseState = wip.memoizedState;
        const updateQueue = wip.updateQueue;
        const pending = updateQueue.shared.pending;
        updateQueue.shared.pending = null;
        const { memoizedState } = processUpdateQueue(baseState, pending, renderLane);
        wip.memoizedState = memoizedState;
        const nextChildren = wip.memoizedState;
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function updateHostComponent(wip) {
        const nextProps = wip.pendingProps;
        const nextChildren = nextProps.children;
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function updateFunctionComponent(wip, renderLane) {
        const nextChildren = renderWithHooks(wip, renderLane);
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function reconcileChildren(wip, children) {
        const current = wip.alternate;
        if (current === null) {
            // mount流程
            wip.child = mountChildReconciler(wip, null, children);
        }
        else {
            // update流程
            wip.child = reconcileChildFibers(wip, current?.child, children);
        }
    }

    let nextEffect = null;
    function commitMutationEffects(finshedWork, root) {
        nextEffect = finshedWork;
        while (nextEffect != null) {
            const child = nextEffect.child;
            if ((nextEffect.subtreeFlags & (MutationMask | PassiveMask)) !== NoFlags && child != null) {
                nextEffect = child;
            }
            else {
                // 向上遍历
                up: while (nextEffect != null) {
                    commitMutationEffectsOnFiber(nextEffect, root);
                    const sibling = nextEffect.sibling;
                    if (sibling != null) {
                        nextEffect = sibling;
                        break up;
                    }
                    nextEffect = nextEffect.return;
                }
            }
        }
    }
    const commitMutationEffectsOnFiber = (finshedWork, root) => {
        const flags = finshedWork.flags;
        if ((flags & Placement) != NoFlags) {
            commitPlacement(finshedWork);
            finshedWork.flags &= ~Placement;
        }
        if ((flags & Update) != NoFlags) {
            commitUpdate(finshedWork);
            finshedWork.flags &= ~Update;
        }
        if ((flags & ChildDeletion) != NoFlags) {
            const deletions = finshedWork.deletions;
            if (deletions != null) {
                deletions.forEach(childToDelete => {
                    commitDeletion(childToDelete, root);
                });
            }
            finshedWork.flags &= ~ChildDeletion;
        }
        if ((flags & PassiveEffect) != NoFlags) {
            // 收集回调
            commitPassiveEffect(finshedWork, root, 'update');
            finshedWork.flags &= ~PassiveEffect;
        }
    };
    function commitPassiveEffect(fiber, root, type) {
        // update unmount
        if (fiber.tag != FunctionComponent || (type === "update" && (fiber.flags & PassiveEffect) === NoFlags)) {
            return;
        }
        const updateQueue = fiber.updateQueue;
        if (updateQueue != null) {
            if (updateQueue.lastEffect === null && true) {
                console.warn('当FC存在PassiveEffect flag时不应该不存在effect');
                return;
            }
            root.pendingPassiveEffects[type].push(updateQueue.lastEffect);
        }
    }
    function commitHookEffectList(flags, lastEffect, callback) {
        let effect = lastEffect.next;
        do {
            if ((effect.tag & flags) === flags) {
                callback(effect);
            }
            effect = effect.next;
        } while (effect != lastEffect.next);
    }
    function commitHookEffectListDestory(flags, lastEffect) {
        commitHookEffectList(flags, lastEffect, effect => {
            const destory = effect.destory;
            if (typeof destory === "function") {
                destory();
            }
            effect.tag &= ~HookHasEffect;
        });
    }
    function commitHookEffectListUnmount(flags, lastEffect) {
        commitHookEffectList(flags, lastEffect, effect => {
            const destory = effect.destory;
            if (typeof destory === "function") {
                destory();
            }
        });
    }
    function commitHookEffectListCreate(flags, lastEffect) {
        commitHookEffectList(flags, lastEffect, effect => {
            const create = effect.create;
            if (typeof create === "function") {
                effect.destory = create();
            }
        });
    }
    function recordHostChildrenToDelete(childrenToDelete, unmountFiber) {
        // 1、找到第一个root host节点
        // 2、每找到一个，判断下这个节点是不是1找到的那个兄弟节点
        const lastOne = childrenToDelete[childrenToDelete.length - 1];
        if (!lastOne) {
            childrenToDelete.push(unmountFiber);
        }
        else {
            let node = lastOne.sibling;
            while (node != null) {
                if (unmountFiber === node) {
                    childrenToDelete.push(unmountFiber);
                }
                node = node.sibling;
            }
        }
    }
    function commitDeletion(childToDelete, root) {
        const rooChildrenToDelete = [];
        commitNestedComponent(childToDelete, unmountFiber => {
            switch (unmountFiber.tag) {
                case HostComponent:
                    // 解绑ref
                    recordHostChildrenToDelete(rooChildrenToDelete, unmountFiber);
                    break;
                case HostText:
                    recordHostChildrenToDelete(rooChildrenToDelete, unmountFiber);
                    break;
                case FunctionComponent:
                    commitPassiveEffect(unmountFiber, root, 'unmount');
                    return;
                default:
                    {
                        console.warn('未处理的unmount类型');
                    }
                    break;
            }
        });
        // 递归子树
        if (rooChildrenToDelete.length != 0) {
            const hostParent = getHostParent(childToDelete);
            rooChildrenToDelete.forEach(node => {
                removeChild(node.stateNode, hostParent);
            });
        }
        childToDelete.return = null;
        childToDelete.child = null;
    }
    function commitNestedComponent(root, onCommitUnmount) {
        let node = root;
        while (true) {
            onCommitUnmount(node);
            if (node.child != null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root) {
                return;
            }
            while (node.sibling === null) {
                if (node.return === null || node.return === root) {
                    return;
                }
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitPlacement(finshedWork) {
        {
            console.warn('执行Placement操作', finshedWork);
        }
        const hostParent = getHostParent(finshedWork);
        const sibling = getHostSibling(finshedWork);
        insertOrAppendPlacementNodeIntoContainer(finshedWork, hostParent, sibling);
    }
    function getHostSibling(fiber) {
        let node = fiber;
        findSibling: while (true) {
            while (node.sibling === null) {
                const parent = node.return;
                if (parent === null || parent.tag === HostComponent || parent.tag === HostText) {
                    return null;
                }
                node = parent;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag != HostText && node.tag != HostComponent) {
                if ((node.flags & Placement) != NoFlags) {
                    continue findSibling;
                }
                if (node.child == null) {
                    continue findSibling;
                }
                else {
                    node.child.return = node;
                    node = node.child;
                }
            }
            if ((node.flags & Placement) === NoFlags) {
                return node.stateNode;
            }
        }
    }
    function getHostParent(fiber) {
        let parent = fiber.return;
        while (parent) {
            const parentTag = parent.tag;
            if (parentTag === HostComponent) {
                return parent.stateNode;
            }
            if (parentTag === HostRoot) {
                return parent.stateNode.container;
            }
            parent = parent.return;
        }
        {
            console.warn('未找到对应host');
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(finshedWork, hostParent, before) {
        if (finshedWork.tag === HostComponent || finshedWork.tag === HostText) {
            if (before) {
                insertChildToContainer(finshedWork.stateNode, hostParent, before);
            }
            else {
                appendChildToContainer(hostParent, finshedWork.stateNode);
            }
            return;
        }
        const child = finshedWork.child;
        if (child != null) {
            insertOrAppendPlacementNodeIntoContainer(child, hostParent);
            let sibling = child.sibling;
            while (sibling != null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, hostParent);
                sibling = sibling.sibling;
            }
        }
    }

    function markUpdate(fiber) {
        fiber.flags |= Update;
    }
    const completeWork = (wip) => {
        const newProps = wip.pendingProps;
        const current = wip.alternate;
        switch (wip.tag) {
            case HostComponent:
                if (current != null && wip.stateNode) {
                    // var oldProps = current.pendingProps;
                    markUpdate(wip);
                    // update阶段
                }
                else {
                    // 构建DOM
                    const instance = createInstance(wip.type, newProps);
                    // 将DOM插入DOM树中
                    appendAllChildren(instance, wip);
                    wip.stateNode = instance;
                }
                bubbleProperties(wip);
                break;
            case HostText:
                if (current != null && wip.stateNode) {
                    // update阶段
                    const oldText = current.memoizedProps.content;
                    const newText = newProps.content;
                    if (oldText != newText) {
                        markUpdate(wip);
                    }
                }
                else {
                    // 构建DOM
                    const instance = createTextInstance(newProps.content);
                    // 将DOM插入DOM树中
                    wip.stateNode = instance;
                }
                bubbleProperties(wip);
                break;
            case FunctionComponent:
            case HostRoot:
            case Fragment:
                bubbleProperties(wip);
                break;
            default:
                {
                    console.warn('未处理的complateWork');
                }
                break;
        }
    };
    function appendAllChildren(parent, wip) {
        let node = wip.child;
        while (node != null) {
            if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node?.stateNode);
            }
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === wip) {
                return;
            }
            while (node.sibling === null) {
                if (node.return === null || node.return === wip) {
                    return;
                }
                node = node?.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function bubbleProperties(wip) {
        let subtreeFlags = NoFlags;
        let child = wip.child;
        while (child != null) {
            subtreeFlags |= child.subtreeFlags;
            subtreeFlags |= child.flags;
            child.return = wip;
            child = child.sibling;
        }
        wip.subtreeFlags |= subtreeFlags;
    }

    let syncQueue = null;
    function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
            syncQueue = [callback];
        }
        else {
            syncQueue.push(callback);
        }
    }
    function flushSyncCallbacks() {
        try {
            syncQueue?.forEach(callback => callback());
        }
        catch (e) {
            {
                console.log(e);
            }
        }
        finally {
            syncQueue = null;
        }
    }

    let workInProgress = null;
    let wipRootRenderLane = NoLane;
    function prepareFreshStack(root, lane) {
        workInProgress = createWorkInProgress(root.current, {});
        wipRootRenderLane = lane;
    }
    function scheduleUpdateOnFiber(fiber, lane) {
        // 调度功能,参数中的fiber指的是发生Update的fiber节点，要向上遍历到根节点
        const root = markUpdateFromFiberToRoot(fiber);
        markRootUpdated(root, lane);
        ensureRootIsScheduled(root);
    }
    function ensureRootIsScheduled(root) {
        const updateLane = getHighesPriorityLane(root.pendingLanes);
        // 没有更新
        if (updateLane == NoLane) {
            return;
        }
        if (updateLane === SyncLane) {
            // 同步更新，用微任务调度
            {
                console.warn('在微任务中调度优先级', updateLane);
            }
            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root, updateLane));
            scheduleMicroTask(flushSyncCallbacks);
        }
    }
    function markRootUpdated(root, lane) {
        root.pendingLanes = mergeLanes(root.pendingLanes, lane);
    }
    function markUpdateFromFiberToRoot(fiber) {
        let node = fiber;
        let parent = node.return;
        while (parent != null) {
            node = parent;
            parent = node.return;
        }
        if (node.tag === HostRoot) {
            // node.stateNode代表的是FiberRoot
            return node.stateNode;
        }
        return null;
    }
    function performSyncWorkOnRoot(root, lane) {
        const nextLane = getHighesPriorityLane(root.pendingLanes);
        if (nextLane != SyncLane) {
            ensureRootIsScheduled(root);
            return;
        }
        console.log('root', root);
        prepareFreshStack(root, lane);
        do {
            try {
                workLoop();
                break;
            }
            catch (e) {
                {
                    console.warn('发生错误');
                }
                workInProgress = null;
            }
        } while (true);
        // 生成的整个fiberNode
        const finshedWork = root.current.alternate;
        root.finshedWork = finshedWork;
        root.finishedLane = lane;
        wipRootRenderLane = NoLane;
        // wip fiberNode书中的flags
        commitRoot(root);
    }
    function commitRoot(root) {
        const finshedWork = root.finshedWork;
        if (finshedWork === null) {
            return;
        }
        {
            console.warn('commit开始', finshedWork);
        }
        const lane = root.finishedLane;
        if (lane === NoLane && true) {
            console.warn('commit阶段finishedLane不应该为NoLane');
        }
        // 重置
        root.finshedWork = null;
        root.finishedLane = NoLane;
        if ((finshedWork.flags & PassiveMask) !== NoFlags || (finshedWork.subtreeFlags & PassiveMask) !== NoFlags) {
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, () => {
                // 执行副作用
                flushPassiveEffects(root.pendingPassiveEffects);
                return;
            });
        }
        markRootFinshed(root, lane);
        // root flags root subtreeFlags
        const subtreeHasEffect = (finshedWork.subtreeFlags & MutationMask) != NoFlags;
        const rootHasEffect = (finshedWork.flags & MutationMask) != NoFlags;
        if (subtreeHasEffect || rootHasEffect) {
            // beforeMutation
            // mutation Placement
            commitMutationEffects(finshedWork, root);
            root.current = finshedWork;
            // layout
        }
        else {
            root.current = finshedWork;
        }
        ensureRootIsScheduled(root);
    }
    function flushPassiveEffects(pendingPassiveEffects) {
        pendingPassiveEffects.unmount.forEach(effect => {
            commitHookEffectListDestory(Passive, effect);
        });
        pendingPassiveEffects.unmount = [];
        pendingPassiveEffects.update.forEach(effect => {
            commitHookEffectListUnmount(Passive | HookHasEffect, effect);
        });
        pendingPassiveEffects.update.forEach(effect => {
            commitHookEffectListCreate(Passive | HookHasEffect, effect);
        });
        pendingPassiveEffects.update = [];
        flushSyncCallbacks();
    }
    function workLoop() {
        while (workInProgress != null) {
            performUnitOfWork(workInProgress);
        }
    }
    function performUnitOfWork(fiber) {
        // 这里的next指的是fiber的child
        const next = beginWork(fiber, wipRootRenderLane);
        fiber.memoizedProps = fiber.pendingProps;
        if (next === null) {
            completeUnitOfWork(fiber);
        }
        else {
            workInProgress = next;
        }
    }
    function completeUnitOfWork(fiber) {
        let node = fiber;
        do {
            completeWork(node);
            const sibling = node.sibling;
            if (sibling != null) {
                workInProgress = sibling;
                return;
            }
            node = node.return;
            workInProgress = node;
        } while (node != null);
    }

    function createContainer(container) {
        const hostRootFiber = new FiberNode(HostRoot, {}, null);
        const root = new FiberRootNode(container, hostRootFiber);
        hostRootFiber.updateQueue = createUpdateQueue();
        return root;
    }
    function updateContainer(element, root) {
        const hostRootFiber = root.current;
        const lane = requestUpdateLane();
        const update = createUpdate(element, lane);
        enqueueUpdate(hostRootFiber.updateQueue, update);
        scheduleUpdateOnFiber(hostRootFiber, lane);
        return element;
    }

    let idCounter = 0;
    function createRoot() {
        const container = {
            rootID: idCounter++,
            children: []
        };
        const root = createContainer(container);
        function getChildren(parent) {
            if (parent) {
                return parent.children;
            }
            return null;
        }
        function getChildrenAsJSX(root) {
            const children = childToJSX(getChildren(root));
            if (Array.isArray(children)) {
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: REACT_FRAGMENT_TYPE,
                    key: null,
                    ref: null,
                    props: { children },
                    __mark: 'KaSong'
                };
            }
            return children;
        }
        // 递归将整棵子树变为JSX
        function childToJSX(child) {
            if (['string', 'number'].includes(typeof child)) {
                return child;
            }
            if (Array.isArray(child)) {
                if (child.length === 0) {
                    return null;
                }
                if (child.length === 1) {
                    return childToJSX(child[0]);
                }
                const children = child.map(childToJSX);
                // 如果每个child都是文本节点，将他们连接在一起形成string
                if (children.every((c) => ['string', 'number'].includes(typeof c))) {
                    return children.join('');
                }
                // 混合了Instance与TextInstance，应该用Fragment处理
                return children;
            }
            // 这是Instance
            if (Array.isArray(child.children)) {
                const instance = child;
                const children = childToJSX(instance.children);
                const props = instance.props;
                if (children !== null) {
                    props.children = children;
                }
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: instance.type,
                    key: null,
                    ref: null,
                    props,
                    __mark: 'YDM'
                };
            }
            // 这是TextInstance
            return child.text;
        }
        return {
            _Scheduler: Scheduler__namespace,
            render(element) {
                return updateContainer(element, root);
            },
            getChildren() {
                return getChildren(container);
            },
            getChildrenAsJSX() {
                return getChildrenAsJSX(container);
            },
        };
    }

    var ReactNoopRenderer = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createRoot: createRoot
    });

    return ReactNoopRenderer;

}));
